/* How to use the DHT-22 sensor with Arduino uno
   Temperature and humidity sensor
*/

//Libraries
#include <DHT.h>
#include <SoftwareSerial.h>
#include <Adafruit_Sensor.h>
#include <Adafruit_BMP280.h>
#include <ThingSpeak.h>
SoftwareSerial esp8266(9, 10);

Adafruit_BMP280 bmp; // I2C


//Constants
#define DHTPIN 8     // what pin we're connected to
#define DHTTYPE DHT22   // DHT 22  (AM2302)
DHT dht(DHTPIN, DHTTYPE); //// Initialize DHT sensor for normal 16mhz Arduino
#include <LiquidCrystal_I2C.h>
#include <stdlib.h>
LiquidCrystal_I2C  lcd(0x27,20,4);

#define SSID "sarath"     // "SSID-WiFiname" 
#define PASS "mskrishna"       // "password"
#define IP "184.106.153.149" // thingspeak.com ip
String msg = "GET /update?key=NBVM3TAW5FJ9RRJO"; //change it with your api key like "GET /update?key=Your Api Key" 

//dht DHT;

//Variables
int chk;
volatile  float hum;  //Stores humidity value
float temp; //Stores temperature value
int error;
int light;
float Vsig;
unsigned long duration;
unsigned long starttime;
unsigned long sampletime_ms = 2000; 
unsigned long lowpulseoccupancy = 0;
float ratio = 0;
float concentration = 0;
int buzzer=4;

void setup()
{
   lcd.init();
  // Print a message to the lcd.
  lcd.backlight();
  lcd.setCursor(1, 0);
  lcd.print("Connecting...");
  //Serial.begin(115200);
  dht.begin();
  pinMode(buzzer,OUTPUT);       //declaring the ports as i/o
 // pinMode(5,OUTPUT);       //declaring the ports as i/o
  pinMode(A0,INPUT);
  pinMode(6,INPUT);
  esp8266.println("AT");
  Serial.println(F("AT"));
  lcd.print("connection to wifi");
  if (esp8266.find("OK")) {
    connectWiFi();
    lcd.print("wifi connection");
  }
  starttime = millis(); 
  Serial.begin(115200); //or use default 115200.
  esp8266.begin(115200);
 Serial.println(F("BMP280 test"));
  
  if (!bmp.begin()) {  
    Serial.println(F("Could not find a valid BMP280 sensor, check wiring!"));
    while (1);
  }
  
  
 
}

void loop()
{
  
    delay(2000);
    //Read data and store it to variables hum and temp
  //  int readData = dht.read22(8);
    hum= dht.readHumidity();
    temp= dht.readTemperature();
    //Print temp and humidity values to serial monitor
    Serial.print("Hum: ");
    lcd.clear();
    lcd.setCursor(1,0);
    lcd.print("hum  ");
    Serial.print(hum);
    lcd.print(hum);
    Serial.print(" %, Temp: ");
    lcd.setCursor(1,1);
    lcd.print("temp : ");
    Serial.print(temp);
    lcd.print(temp);
    Serial.println(F(" Celsius"));
    lcd.print("C");
    if(temp>20)
    {
      tone(buzzer,261);    
    // Waits some time to turn off
    delay(500);
     noTone(buzzer); 
    }
      

    delay(10000); //Delay 2 sec.

    
   //barometer code
   Serial.print(F("Temperature = "));
    Serial.print(bmp.readTemperature());
    //Serial.println(" *C");
    lcd.clear();
    lcd.print("temp ");
    lcd.print(bmp.readTemperature());
    lcd.println(" *C");
    delay(5000);
    Serial.print(F("Pressure = "));
    Serial.print(bmp.readPressure());
    Serial.println(" Pa");
      lcd.clear();
    lcd.print("pressure");
    lcd.print(bmp.readPressure());
    delay(5000);
    Serial.print(F("Approx altitude = "));
    Serial.print(bmp.readAltitude(1013.25)); // this should be adjusted to your local forcase
    Serial.println(" m");
      lcd.clear();
    lcd.print("altitude ");
    lcd.print(bmp.readAltitude(1013.25));
    delay(100);
    Serial.println();
    if(bmp.readPressure()>90000)
    { tone(buzzer,293);
                 
    delay(200);
     noTone(buzzer);  
    } 
    delay(2000); 

    
    //light code
    light=analogRead(A1);
    Serial.println("Light = " + String(light));
    if ( light < 100){
   tone(buzzer,329);      
    delay(200);
    noTone(buzzer);  
    }

    // UV code
    
  long  sum=0;
  sum=analogRead(A0);
 Vsig = sum*4980.0/1023.0; // Vsig is the value of voltage measured from the SIG pin of the Grove interface
 Serial.print("The voltage value: ");
 Serial.print(Vsig);
 Serial.print(" mV    --   ");
 if (Vsig < 50) {
    Serial.print("UV Index: 0 "); Serial.println(F("   Exposure level - NONE (You're probably at home!) "));
 }
if (Vsig > 50) {
    Serial.print("UV Index: 1 "); Serial.println(F("   Exposure level - HIGH (You're probably at home!) "));
 tone(buzzer,349);    
    delay(200);    
    noTone(buzzer); 
 
 }
 

 

 //dust code

 duration = pulseIn(6, LOW);
  lowpulseoccupancy = lowpulseoccupancy+duration;
  if ((millis()-starttime) >= sampletime_ms) //if the sampel time = = 30s
  {
    ratio = lowpulseoccupancy/(sampletime_ms*10.0);  
    concentration = 1.1*pow(ratio,3)-3.8*pow(ratio,2)+520*ratio+0.62; 
    Serial.print("Concentration = ");
    Serial.print(concentration);
    Serial.println(" pcs/0.01cf");
    Serial.println("\n");
    lowpulseoccupancy = 0;
    starttime = millis();
    if(concentration>0.5)
    {tone(buzzer,392);            
    delay(200);
    noTone(buzzer); 
    }
  }
  updatedata();
}

boolean connectWiFi() {
  lcd.setCursor(1, 1);
  lcd.print("wifi");
  Serial.println("AT+CWMODE=1");
  esp8266.println("AT+CWMODE=1");
  delay(2000);
  String cmd = "AT+CWJAP=\"";
  cmd += SSID;
  cmd += "\",\"";
  cmd += PASS;
  cmd += "\"";
  Serial.println(cmd);
  esp8266.println(cmd);
  delay(5000);
  if (esp8266.find("OK")) {
    lcd.setCursor(1, 1);
    lcd.print("Connected.");
    Serial.println("ok");
    return true;
  } else {
    return false;
  }
}


void updatedata() {
  String cmd = "AT+CIPSTART=\"TCP\",\"";
  cmd += IP;
  cmd += "\",80";
  Serial.println(cmd);
  esp8266.println(cmd);
  delay(10);
  if (esp8266.find("Error")) {
    return;
  }
  cmd = msg ;
  cmd += "&field1=";
  cmd += temp;
   //cmd += "\r\n";
  cmd += "&field2=";
  cmd += hum;
  cmd += "&field3=";
  cmd += bmp.readPressure();
  cmd += "&field4=";
  cmd += light;
  cmd += "&field5=";
  cmd += Vsig;
  cmd += "&field6=";
  cmd += concentration;
  
  cmd += "\r\n";
  Serial.print("AT+CIPSEND=");
  esp8266.print("AT+CIPSEND=");
  Serial.println(cmd.length());
  esp8266.println(cmd.length());
  if (esp8266.find(">")) {
    Serial.print(cmd);
    esp8266.print(cmd);
  }
  else {
    Serial.println("AT+CIPCLOSE");
    esp8266.println("AT+CIPCLOSE");
    //Resend...
    error = 1;
  }
}

   